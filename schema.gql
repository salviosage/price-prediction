# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum AuthType {
  phone
  email
}

enum CarTypeEn {
  Fuso
  Lifan
  Daihatsu
  Trailer
  Pickups
  Motorcycle
}

type CreaateDriverResponse {
  message: String!
}

type CreaateShipmentResponse {
  shipment: Shipment!
  message: String!
}

type CreateDriverResponse {
  message: String!
}

input CreateNoteInput {
  title: String!
  type: String!
  to: NoteToType = REMINDER
  avatar: String
  description: String
}

type CreateNoteResponse {
  note: Note!
  message: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum DealStatus {
  INITIATED
  PROGRESSED
  CREATED
}

"""Driver Model"""
type Driver {
  _id: String!
  user: User!
  nationalId: String!
  vehicleType: String!
  drivingLicense: String!
  isOwner: Boolean!
  plateNumber: String!
  insuranceExpiresOn: DateTime!
  availableTime: String!
  paymentMethod: String!
  accountNumber: String!
  workingRegions: [OLocation!]!
}

type DriversResponse {
  drivers: [Driver!]
  count: Float
}

type estimatePriceReturn {
  message: String
  data: [EstimatePriceStructure!]!
}

type EstimatePriceStructure {
  from: String!
  to: String!
  vehicle: String!
  price: String!
}

type Formula {
  name: String!
  price: Float!
  lifeTime: Float!
  averageTrips: Float!
}

"""The location inputType"""
input ILocation {
  region: String
  lat: String
  long: String
  street: String
}

type LoginPayload {
  user: User!
  token: String!
}

type Mutation {
  calculate(depreciationName: String!, distance: String!): TotalPrice
  calculateFare(depreciationName: String!, distance: String!): TotalPrice
  DeleteDriver(_id: String!): String
  updateDriver(userId: String!, updates: UpdateUserTypes!): User
  CreateDriver(user: String!, nationalId: String!, vehicleInsurance: String!, vehicleType: String!, drivingLicense: String!, isOwner: Boolean!, plateNumber: String!, insuranceExpiresOn: DateTime, availableTime: String, paymentMethod: String, accountNumber: String, workingRegions: [ILocation!]): CreateDriverResponse
  placeAnOrder(names: String!, phoneNumber: String!, weightRange: String!, packageDescription: String!, pickupLocation: String!, destination: String!, paymentMethod: String!): orderResponse
  DeleteNote(_id: String!): String
  CreateNote(refId: String, inputs: CreateNoteInput!): CreateNoteResponse
  updateNote(noteId: String!, updates: UpdateNoteInput!): CreateNoteResponse
  DeleteShipment(_id: String!): String
  CreateShipment(title: String!, orderId: ID!): CreaateShipmentResponse
  updateShipment(shipmentId: String!, updates: UpdateShipmentInput!): CreaateShipmentResponse
  DeleteTruckOrder(_id: String!): String
  createTruckOrder(from: ILocation!, to: ILocation!, phoneNumber: Float!, clientName: String!, vehicleType: CarTypeEn, goodsDetails: String, weightRange: WeightRangeType, paymentMethod: PaymentMethodEn, timeToDeliver: DateTime): TruckOrderResponse
  updateTruckOrder(truckOrderId: String!, updates: updateTruckOrderInput!): TruckOrderResponse
  DeleteUser(_id: String!): String
  DeleteMe: String
  signup(password: String, firstName: String, email: String, lastName: String, phoneNumber: Float, userType: Roles = NORMAL_USER): String
  signinWithPhone(phone: Float!): LoginPayload
  signin(email: String!, password: String!): LoginPayload
  requestPasswordReset(authtype: AuthType = email, email: String, phone: Float): String
  resetPassword(token: String!, password: String!): LoginPayload
}

"""The Note model"""
type Note {
  _id: ID!
  title: String!
  description: String!
  avatar: String!
  to: NoteToType
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotesResponse {
  notes: [Note!]!
  count: Float!
}

enum NoteToType {
  TRUCK_ORDER
  SHIPMENT
  PROSPECT
  REMINDER
}

enum NoteType {
  CHANGEDROPOFF
  CHANGETIME
  EMERGENCIES
  DEALDONE
  DEALCLOSED
  DEALOPENED
  DEFAULTNOTE
}

type notification {
  message: String!
}

"""The location interface"""
type OLocation {
  region: String!
  lat: String!
  long: String!
  street: String
}

type orderResponse {
  status: String!
  message: String!
}

enum PaymentMethodEn {
  MobileMoney
  Bank
  Cash
  Card
}

type Query {
  GetDrivers(skip: Float = 0, take: Float = 25): DriversResponse
  GetOneDriver(_id: String!): Driver
  notifyOperations(names: String!, phoneNumber: String!, weightRange: String!, packageDescription: String!, pickupLocation: String!, destination: String!, paymentMethod: String!): notification
  estimatePrice(from: String!, to: String!, distance: String!): estimatePriceReturn
  GetNotes(skip: Float = 0, take: Float = 25): NotesResponse
  GetOneNote(_id: String!): Note
  GetShipments(skip: Float = 0, take: Float = 25): ShipmentsResponse
  GetOneShipment(_id: String!): Shipment
  GetTruckOrders(skip: Float = 0, take: Float = 25): TruckOrdersResponse
  GetOneTruckOrder(_id: String!): TruckOrder
  GetUsers(skip: Float = 0, take: Float = 25): UsersPayload
  GetOneUser(_id: String!): User
}

enum Roles {
  DRIVER
  ADMIN
  NORMAL_USER
  CLIENT
  OPERATOR
  MANAGER
}

"""The Shipment model"""
type Shipment {
  _id: ID!
  user_id: String!
  title: String!
  status: String!
  orderId: TruckOrder!
  assignedDrivers: Driver!
  notes: Note!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShipmentsResponse {
  shipments: [Shipment!]!
  count: Float!
}

type SignupPayload {
  user: User!
  message: String!
}

type TotalPrice {
  clientPrice: String!
  driverPrice: String!
}

"""The truck order  model"""
type TruckOrder {
  _id: String!
  from: OLocation!
  to: OLocation!
  phoneNumber: Float!
  clientName: String!
  vehicleType: String!
  goodsDetails: String!
  weightRange: String!
  paymentMethod: String!
  notes: Note!
  timeToDeliver: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TruckOrderResponse {
  TruckOrder: TruckOrder!
  message: String!
}

type TruckOrdersResponse {
  TruckOrders: [TruckOrder!]!
  count: Float!
}

input UpdateDriverArgs {
  nationalId: String
  vehicleInsurance: String
  vehicleType: String
  drivingLicense: String
  isOwner: Boolean
  plateNumber: String
  insuranceExpiresOn: DateTime
  availableTime: String
  paymentMethod: String
  accountNumber: String
  workingRegions: [ILocation!]
}

input UpdateNoteInput {
  title: String
  type: NoteType
  to: NoteToType
  avatar: String
  description: String
}

input UpdateShipmentInput {
  title: String
  status: DealStatus
}

input updateTruckOrderInput {
  from: ILocation!
  to: ILocation!
  phoneNumber: Float
  clientName: String
  vehicleType: CarTypeEn
  goodsDetails: String
  weightRange: WeightRangeType
  paymentMethod: PaymentMethodEn
  timeToDeliver: DateTime
}

input UpdateUserTypes {
  firstName: String
  email: String
  lastName: String
  phoneNumber: Float
  userType: Roles
}

type User {
  _id: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: Float!
  userType: String!
  verified: Boolean!
  approved: Boolean!
  is_online: Boolean!
  isActive: Boolean!
  passwordResetToken: String!
  passwordResetTokenExpiry: DateTime!
  avatarPublicId: String!
  avatar: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPayload {
  users: [User!]!
  count: Float!
}

enum WeightRangeType {
  _0_25_kg
  _26_50_kg
  _51_100_kg
  _101_300_kg
  _301_500_kg
  _501_kg_1_ton
  _1_ton_5_ton
  _5_ton_10_ton
  _10_ton_obove
}
