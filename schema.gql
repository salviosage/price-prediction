# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Client {
  id: ID!
  user: User!
  shipment_orders: [ShipmentOrder!]
  contact_persons: [OContact!]
  documents: [ODocument!]
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientLogin {
  client: Client!
  token: String!
}

type ClientSignup {
  message: String!
}

type ClientsPayload {
  clients: [Client!]!
  count: Float!
}

input ClientUpdateInput {
  userInfo: UserUpdateInput
  contact_persons: [IContact!]
  documents: [IDocument!]
  verified: Boolean
}

type CreatedepartmentReturn {
  department: Department!
  message: String!
}

type CreatePositionReturn {
  position: Position!
  message: String!
}

type CreateRoleReturn {
  role: Role!
  message: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Department {
  id: ID!
  title: String!
  description: String
  assignedEmployees: [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DepartmentsPayload {
  departments: [Department!]
  count: Float!
}

type Driver {
  id: ID!
  passport: String
  national_id: String
  user: User!
  documents: [ODocument!]
  work_phone_number: String
  verified: Boolean
  driving_permit: String
  truck_insurance: String
  truck_plate_number: String
  carte_jaune: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DriverLogin {
  driver: Driver!
  token: String!
}

type DriversPayload {
  drivers: [Driver!]!
  count: Float!
}

type DriverWithMessage {
  driver: Driver!
  message: String!
}

type Employee {
  id: ID!
  user: User!
  position: String!
  start_date: DateTime
  end_date: DateTime
  department: String!
  work_email: String
  work_phone_number: String
  t_shirt_size: String
  passport: String
  national_id: String
  status: String
  documents: [ODocument!]
  address: [ORegion!]
  verified: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmployeeLogin {
  user: Employee!
  token: String!
}

type EmployeesPayload {
  users: [User!]!
  count: Float!
}

input EmployeeUpdateArgs {
  userInfo: UserUpdateInput
  position: String
  start_date: DateTime
  end_date: DateTime
  department: String
  work_email: String
  work_phone_number: String
  t_shirt_size: String
  passport: String
  national_id: String
  status: String
  documents: [IDocument!]
  address: [IRegion!]
  verified: Boolean
}

type estimatePriceReturn {
  message: String
  data: [EstimatePriceStructure!]!
}

type EstimatePriceStructure {
  from: String!
  to: String!
  vehicle: String!
  price: String!
}

type Formula {
  name: String!
  price: Float!
  lifeTime: Float!
  averageTrips: Float!
}

input IADriver {
  driver: String!
  price: Float!
}

input IContact {
  phoneNumber: String
  email: String
  names: String
  description: String
}

input IDocument {
  documentId: String
  url: String
  type: String
  verified: Boolean
}

input IRegion {
  type: String
  coordinates: [Float!]
  locationName: String
}

input ITruck {
  type: String
  count: Float
}

type Mutation {
  calculate(depreciationName: String!, distance: String!): TotalPrice
  calculateFare(depreciationName: String!, distance: String!): TotalPrice
  signUpClient(userInfo: UserInput!, contact_persons: [IContact!], documents: [IDocument!]): ClientSignup
  updateClient(id: String!, updates: ClientUpdateInput!): Client
  DeleteClient(_id: String!): String
  createDepartment(title: String!, description: String): CreatedepartmentReturn
  updateDepartment(id: String!, updates: UpdateDepartmentInput!): CreatedepartmentReturn
  DeleteDepartment(_id: String!): String
  signUpDriver(userInfo: UserInput!, passport: String, national_id: String, documents: [IDocument!], work_phone_number: String, driving_permit: String, truck_insurance: String, truck_plate_number: String, carte_jaune: String): UserSignup
  updateDriver(id: String!, updates: UpdateRoleInput!): CreateRoleReturn
  DeleteDriver(_id: String!): String
  signUpEmployee(userInfo: UserInput!, position: String!, start_date: DateTime, end_date: DateTime, department: String!, work_email: String!, work_phone_number: String!, t_shirt_size: String, passport: String, national_id: String, status: String, documents: [IDocument!], address: [IRegion!], verified: Boolean): UserSignup
  updateEmpoyee(id: String!, updates: EmployeeUpdateArgs!): Employee
  placeAnOrder(names: String!, phoneNumber: String!, weightRange: String!, packageDescription: String!, pickupLocation: String!, destination: String!, paymentMethod: String!): orderResponse
  createShipmentNote(shipmentId: String!, noteData: NoteInput!): Note
  NoteUpdate(noteId: String!, updates: UpdateNoteInput!): Note
  deleteNote(_id: String!): String
  createPosition(title: String!, description: String, department: String): CreatePositionReturn
  updatePosition(id: String!, updates: UpdatePositionInput!): CreatePositionReturn
  DeletePosition(_id: String!): String
  createRealTimeDriver(liveLocation: IRegion!): String
  RealTimeDriverUpdate(liveLocation: IRegion): String
  DeleteRealTimeDriver(_id: String!): String
  createRole(title: String!, description: String!, privilegeLevel: Float = 10): CreateRoleReturn
  DeleteRole(_id: String!): String
  createShipment(title: String!, status: String = "Created", shipmentOrderId: String, assignedDrivers: [String!]): Shipment
  updateShipment(id: String!, updates: UpdateShipmentInput!): Shipment
  AssigndriverToShipment(shipmentId: String!, driverId: String!): Shipment
  deleteShipment(_id: String!): String
  createShipmentOrder(from: IRegion!, to: IRegion!, contact: IContact!, destinationContact: IContact, goodsDetails: String!, trucksRequested: [ITruck!]!, timeToDeliver: DateTime!): ShipmentOrder
  updateShipmentOrder(id: String!, updates: UpdateShipmentOrderInput!): ShipmentOrder
  deleteShipmentOrder(_id: String!): String
  signUpUser(userInfo: UserInput!): UserSignup
  updateUser(id: String!, updates: UserUpdateInput!): User
  DeleteUser(_id: String!): String
  resetPassword(password: String!, passwordResetToken: String!): User
  addVehicle(paymentMethod: String!, accountNumber: Float, ownerContact: [IContact!], insurance: String, verified: Boolean!, phoneNumber: Float!, plateNumber: String!, vehicleType: String!, insuranceExpiresOn: DateTime): Vehicle
  updateVehicle(id: String!, updates: UpdateVehicleInput!): Vehicle
  DeleteVehicle(_id: String!): String
}

type Note {
  id: ID!
  title: String!
  type: NoteType!
  description: String!
  coverImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NoteInput {
  title: String!
  type: String = "DefaultNote"
  description: String!
  coverImage: String
}

type NotesPayload {
  notes: [Note!]!
  count: Float!
}

enum NoteType {
  CHANGEDROPOFF
  CHANGETIME
  EMERGENCIES
  DEALDONE
  DEALCLOSED
  DEALOPENED
  DEFAULTNOTE
}

type notification {
  message: String!
}

type OADriver {
  driver: Driver
  price: Float
}

type OContact {
  phoneNumber: String
  email: String
  names: String
  description: String
}

type ODocument {
  documentId: String!
  url: String
  type: String
  verified: Boolean
}

type orderResponse {
  status: String!
  message: String!
}

type ORegion {
  type: String!
  coordinates: [Float!]!
  locationName: String
}

type OTruck {
  type: String
  count: Float
}

type Position {
  id: ID!
  title: String!
  description: String
  assignedEmployees: [User!]
  department: Department
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PositionsPayload {
  positionss: [Position!]
  count: Float!
}

type Query {
  GetClients(skip: Float = 0, take: Float = 25): ClientsPayload
  GetOneCleint(_id: String!): Client
  signInClientWithPhone(phone_number: String!, password: String!): ClientLogin
  signInClient(email: String!, password: String!): ClientLogin
  GetDepartments(skip: Float = 0, take: Float = 25): DepartmentsPayload
  GetOneDepartment(_id: String!): Department
  GetAuthDriver: Driver
  GetDrivers(skip: Float = 0, take: Float = 25): DriversPayload
  GetOneDriver(_id: String!): Driver
  signInDriver(email: String!, password: String!): DriverLogin
  signInWPDriver(phone_number: String!, password: String!): DriverLogin
  notifyOperations(names: String!, phoneNumber: String!, weightRange: String!, packageDescription: String!, pickupLocation: String!, destination: String!, paymentMethod: String!): notification
  GetEmployees(skip: Float = 0, take: Float = 25): EmployeesPayload
  GetOneEmployee(_id: String!): Employee!
  signInEmployee(email: String!, password: String!): EmployeeLogin
  estimatePrice(from: String!, to: String!, distance: String!): estimatePriceReturn
  getNotes(skip: Float = 0, take: Float = 25): NotesPayload
  getOneNote(_id: String!): Note
  GetPositions(skip: Float = 0, take: Float = 25): PositionsPayload
  GetOnePosition(_id: String!): Position
  GetRealTimeDriver(skip: Float = 0, take: Float = 25): RealTimeDriversPayload
  GetRealTimeDrivers(_id: String!): RealTimeDrivers
  GetRoles(skip: Float = 0, take: Float = 25): RolesPayload
  GetOneRole(_id: String!): Role
  getShipments(skip: Float = 0, take: Float = 25): ShipmentsPayload
  getOneShipment(_id: String!): Shipment
  getShipmentOrders(skip: Float = 0, take: Float = 25): ShipmentOrdersPayload
  getOneShipmentOrder(_id: String!): ShipmentOrder
  GetUsers(skip: Float = 0, take: Float = 25): UsersPayload
  GetOneUser(_id: String!): User
  signinWithPhone(phone_number: String!, password: String!): UserLogin
  signInUser(email: String!, password: String!): UserLogin
  GetVehicles(skip: Float = 0, take: Float = 25): VehiclesPayload
  GetOneVehicle(_id: String!): Vehicle
}

type RealTimeDrivers {
  id: ID!
  driver: Driver
  isOnline: Boolean!
  liveLocation: ORegion
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RealTimeDriversPayload {
  drivers: [RealTimeDrivers!]!
  count: Float!
}

type Role {
  id: ID!
  title: String!
  description: String!
  privilegeLevel: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RolesPayload {
  roles: [Role!]!
  count: Float!
}

type Shipment {
  id: ID!
  title: String!
  status: String!
  shipmentOrder: ShipmentOrder
  assignedDrivers: [Driver!]
  notes: [Note!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShipmentOrder {
  id: ID!
  from: ORegion!
  to: ORegion!
  contact: OContact!
  destinationContact: OContact
  goodsDetails: String
  trucksRequested: [OTruck!]
  assignedDrivers: [OADriver!]
  timeToDeliver: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShipmentOrdersPayload {
  shipmentOrders: [ShipmentOrder!]!
  count: Float!
}

type ShipmentsPayload {
  shipments: [Shipment!]!
  count: Float!
}

type Subscription {
  realTimeDriversub: RealTimeDriversPayload!
}

type TotalPrice {
  clientPrice: String!
  driverPrice: String!
}

input UpdateDepartmentInput {
  title: String
  description: String
}

input UpdateNoteInput {
  title: String
  type: String
  description: String
  coverImage: String
}

input UpdatePositionInput {
  title: String
  description: String
  department: String
}

input UpdateRoleInput {
  title: String
  description: String
  privilegeLevel: Float
}

input UpdateShipmentInput {
  title: String
  status: String
  shipmentOrderId: String
  assignedDrivers: [String!]
}

input UpdateShipmentOrderInput {
  from: IRegion
  to: IRegion
  contact: IContact
  destinationContact: IContact
  goodsDetails: String
  trucksRequested: [ITruck!]!
  weightRange: String
  timeToDeliver: DateTime
}

input UpdateVehicleInput {
  paymentMethod: String
  accountNumber: Float
  ownerContact: [IContact!]
  insurance: String
  verified: Boolean
  phoneNumber: Float
  plateNumber: String
  vehicleType: String
  insuranceExpiresOn: DateTime
}

type User {
  id: ID!
  first_name: String!
  other_names: String!
  email: String!
  phone_number: String!
  email_verified: Boolean!
  phone_number_verified: Boolean!
  user_type: String!
  account_status: String!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserInput {
  first_name: String!
  other_names: String!
  email: String!
  phone_number: String!
  user_type: String
  account_status: String
  avatar: String
  password: String!
}

type UserLogin {
  user: User!
  token: String!
}

type UserSignup {
  message: String!
}

type UsersPayload {
  users: [User!]!
  count: Float!
}

input UserUpdateInput {
  first_name: String
  other_names: String
  phone_number: String
  user_type: String
  avatar: String
  account_status: String
}

type Vehicle {
  id: ID!
  paymentMethod: String!
  accountNumber: Float
  ownerContact: [OContact!]
  insurance: String
  verified: Boolean!
  phoneNumber: Float!
  plateNumber: String!
  vehicleType: String!
  insuranceExpiresOn: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VehiclesPayload {
  vehicles: [Vehicle!]!
  count: Float!
}

type WorkInfo {
  position: String!
  startingDate: DateTime
  endingDate: DateTime
  department: String!
  workEmail: String
  workPhone: String
  shirtSize: String
}
